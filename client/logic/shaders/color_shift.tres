[gd_resource type="Shader" format=3 uid="uid://bq8q1ltxmyovr"]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform bool shifting;
uniform float shift_level_h : hint_range(0, 1);
uniform float shift_level_s : hint_range(0, 1);
uniform float shift_level_b : hint_range(0, 1);
uniform vec4 old_color : source_color;
uniform vec4 new_color : source_color;
uniform float shift_shades_threshold : hint_range(0, 1) = 1.0;
uniform float shift_shades_factor : hint_range(0, 1) = 1.0;

vec3 rgb2hsb(vec3 c){
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz),
                vec4(c.gb, K.xy),
                step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r),
                vec4(c.r, p.yzx),
                step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),
                d / (q.x + e),
                q.x);
}


vec3 hsb2rgb(vec3 c){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                    6.0)-3.0)-1.0,
                    0.0,
                    1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix(vec3(1.0), rgb, c.y);
}


void fragment() {
	vec3 hsb = rgb2hsb(COLOR.rgb);
	vec3 hsb_old = rgb2hsb(old_color.rgb);
	if (shifting && abs(hsb.x - hsb_old.x) < shift_level_h && abs(hsb.y - hsb_old.y) < shift_level_s && abs(hsb.z - hsb_old.z) < shift_level_b){
		vec3 hsb_new = rgb2hsb(new_color.rgb);
		hsb.x = hsb_new.x;
		hsb.y = hsb_new.y;
		// To darken the darker areas more
		if(hsb.y > shift_shades_threshold){
			hsb.z = hsb.z * shift_shades_factor;
		}
		COLOR = vec4(hsb2rgb(hsb), COLOR.a);
	}
}
"
